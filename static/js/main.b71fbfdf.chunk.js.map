{"version":3,"sources":["components/PhoneForm.js","components/PhoneInfo.js","components/PhoneInfoList.js","components/MyComp.js","App.js","components/MyComp2.js","serviceWorker.js","index.js"],"names":["PhoneForm","state","name","phone","handleChange","e","setState","target","value","handleSubmit","preventDefault","props","onCreate","handleSaveDB","onSaveDB","onSubmit","this","placeholder","onChange","type","onClick","Component","PhoneInfo","editing","complete","handleRemove","info","onRemove","id","handleToggleEdit","handleComplete","console","log","nextProps","nextState","prevProps","prevState","onUpdate","style","border","padding","margin","textDecorationLine","backgroundColor","defaultProps","PhoneInfoList","data","list","map","key","warn","MyComp","getHeroku","a","isLoading","items","axios","get","res","error","handleKeyClick","redis_key","onKeyClick","val","idx","href","data-DBKey","App","information","post","then","response","status","catch","keyword","handleCreate","concat","filter","handleUpdate","loading","filteredList","indexOf","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.b71fbfdf.chunk.js","sourcesContent":["// file: src/components/PhoneForm.js\r\nimport React, { Component } from 'react';\r\n\r\nclass PhoneForm extends Component {\r\n  state = {\r\n    name: '',\r\n    phone: ''\r\n  }\r\n  handleChange = (e) => {\r\n    this.setState({\r\n      [e.target.name]: e.target.value\r\n    })\r\n  }\r\n  handleSubmit = (e) => {\r\n    // 페이지 리로딩 방지\r\n    e.preventDefault();\r\n    // 상태값을 onCreate 를 통하여 부모에게 전달\r\n    this.props.onCreate(this.state);\r\n    // 상태 초기화\r\n    this.setState({\r\n      name: '',\r\n      phone: ''\r\n    })\r\n  }  \r\n  handleSaveDB = (e) => {\r\n    e.preventDefault();\r\n    this.props.onSaveDB(this.state);\r\n    /*\r\n    this.setState({\r\n      name: '',\r\n      phone: ''\r\n    })\r\n    */\r\n  }    \r\n  render() {\r\n    return (\r\n        <form onSubmit={this.handleSubmit}>\r\n          <input\r\n            placeholder=\"품목\"\r\n            value={this.state.name}\r\n            onChange={this.handleChange}\r\n            name=\"name\"          \r\n          />\r\n          {/*\r\n          <input\r\n            placeholder=\"전화번호\"\r\n            value={this.state.phone}\r\n            onChange={this.handleChange}\r\n            name=\"phone\"\r\n          /> \r\n          */}       \r\n          <button type=\"submit\">등록</button>\r\n          <button onClick={this.handleSaveDB}>DB저장</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PhoneForm;","import React, { Component } from 'react';\r\n\r\nclass PhoneInfo extends Component {\r\n  static defaultProps = {\r\n    info: {\r\n      name: '품목',\r\n      phone: '010-0000-0000',\r\n      id: 0\r\n    },\r\n  }\r\n\r\n  state = {\r\n    // 우리는 수정 버튼을 눌렀을 떄 editing 값을 true 로 설정해줄것입니다.\r\n    // 이 값이 true 일 때에는, 기존에 텍스트 형태로 보여주던 값들을\r\n    // input 형태로 보여주게 됩니다.\r\n    editing: false,\r\n    // input 의 값은 유동적이겠지요? input 값을 담기 위해서 각 필드를 위한 값도\r\n    // 설정합니다\r\n    name: '',\r\n    phone: '',\r\n    complete: false\r\n  }\r\n\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    console.log('shouldComponentUpdate PhoneInfo');\r\n    // 수정 상태가 아니고, info 값이 같다면 리렌더링 안함\r\n    /* complete 추가하면서 주석처리 ( 그냥 모두 렌더링 - 스터디 차원)\r\n    if (!this.state.editing  \r\n        && !nextState.editing\r\n        && nextProps.info === this.props.info) {\r\n      return false;\r\n    }\r\n    */\r\n    // 나머지 경우엔 리렌더링함\r\n    return true;\r\n  }\r\n\r\n  handleRemove = () => {\r\n    // 삭제 버튼이 클릭되면 onRemove 에 id 넣어서 호출\r\n    const { info, onRemove } = this.props;\r\n    onRemove(info.id);\r\n  }\r\n\r\n  // editing 값을 반전시키는 함수입니다\r\n  // true -> false, false -> true\r\n  handleToggleEdit = () => {\r\n    const { editing } = this.state;\r\n    this.setState({ editing: !editing });\r\n  }\r\n\r\n  // 완료버튼처리\r\n  handleComplete = () => {\r\n    console.log('handleComplete')\r\n    const { complete } = this.state;\r\n    this.setState({ complete: !complete });\r\n  }  \r\n\r\n  // input 에서 onChange 이벤트가 발생 될 때\r\n  // 호출되는 함수입니다\r\n  handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    this.setState({\r\n      [name]: value\r\n    });\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    console.log('componentDidUpdate PhoneInfo');\r\n    // 여기서는, editing 값이 바뀔 때 처리 할 로직이 적혀있습니다.\r\n    // 수정을 눌렀을땐, 기존의 값이 input에 나타나고,\r\n    // 수정을 적용할땐, input 의 값들을 부모한테 전달해줍니다.\r\n\r\n    const { info, onUpdate } = this.props;\r\n    if(!prevState.editing && this.state.editing) {\r\n      // editing 값이 false -> true 로 전환 될 때\r\n      // info 의 값을 state 에 넣어준다\r\n      this.setState({\r\n        name: info.name,\r\n        phone: info.phone\r\n      })\r\n    }\r\n\r\n    if (prevState.editing && !this.state.editing) {\r\n      // editing 값이 true -> false 로 전환 될 때\r\n      onUpdate(info.id, {\r\n        name: this.state.name,\r\n        phone: this.state.phone\r\n      });\r\n    }\r\n  }\r\n  \r\n  render() {\r\n    console.log('render PhoneInfo ' + this.props.info.id);\r\n    const style = {\r\n      border: '1px solid black',\r\n      padding:'0px',\r\n      margin: '0px'\r\n    };\r\n    const complete_style = {\r\n      textDecorationLine: 'line-through',\r\n      backgroundColor: 'lightskyblue'\r\n    };    \r\n\r\n    const { editing, complete } = this.state;\r\n    \r\n    if (editing) { // 수정모드\r\n      return (\r\n        <div style={style}>\r\n          <input \r\n              value={this.state.name}\r\n              name=\"name\"\r\n              placeholder=\"이름\"\r\n              onChange={this.handleChange}\r\n          />{'\\u00A0'}{'\\u00A0'}\r\n          {/*\r\n          <input \r\n              value={this.state.phone}\r\n              name=\"phone\"\r\n              placeholder=\"전화번호\"\r\n              onChange={this.handleChange}\r\n          />{'\\u00A0'}\r\n          */}\r\n          <button onClick={this.handleToggleEdit}>적용</button>{'\\u00A0'}\r\n          <button onClick={this.handleRemove}>삭제</button>{'\\u00A0'}\r\n          <button onClick={this.handleComplete}>완료</button>{'\\u00A0'}\r\n        </div>\r\n      );\r\n    }\r\n\r\n\r\n    // 일반모드\r\n    const {\r\n      name, phone\r\n    } = this.props.info;\r\n    \r\n    return (\r\n      <div style={style}>\r\n        {complete ? \r\n          <span style={complete_style}>\r\n            {name}{'\\u00A0'}{'\\u00A0'}{/*phone*/}\r\n          </span> :\r\n          <span>\r\n            {name}{'\\u00A0'}{'\\u00A0'}{/*phone*/}\r\n          </span>           \r\n        }\r\n        <button onClick={this.handleToggleEdit}>수정</button>{'\\u00A0'}\r\n        <button onClick={this.handleRemove}>삭제</button>{'\\u00A0'}\r\n        <button onClick={this.handleComplete}>완료</button>{'\\u00A0'}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PhoneInfo;","// src/components/PhoneInfoList.js\r\nimport React, { Component } from 'react';\r\nimport PhoneInfo from './PhoneInfo';\r\n\r\nclass PhoneInfoList extends Component {\r\n  static defaultProps = {\r\n      list: [],\r\n      onRemove: () => console.warn('onRemove not defined'),\r\n      onUpdate: () => console.warn('onUpdate not defined'),\r\n  }\r\n\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    console.log('shouldComponentUpdate PhoneInfoList');\r\n    return nextProps.data !== this.props.data;\r\n  }      \r\n\r\n  render() {\r\n    console.log('render PhoneInfoList');\r\n    const { data, onRemove, onUpdate } = this.props;    \r\n    const list = data.map(\r\n        info => (\r\n          <PhoneInfo\r\n            key={info.id}\r\n            info={info}\r\n            onRemove={onRemove}\r\n            onUpdate={onUpdate}\r\n          />)\r\n      );    \r\n\r\n    return (\r\n      <div>\r\n        {list}    \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PhoneInfoList;","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\n\r\nclass MyComp extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isLoading: true,\r\n      items:[]\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    /*\r\n    axios.get(`https://jn22l.herokuapp.com/`) // remote\r\n      .then(res => {\r\n        const hello_heroku = res.data;\r\n        console.log(res.data);\r\n        this.setState({ hello_heroku });\r\n      })\r\n    */\r\n    this.getHeroku(); // 비동기 test\r\n  }\r\n\r\n  // 비동기 get\r\n  getHeroku = async () => {\r\n    try {\r\n      const { isLoading, items } = this.state\r\n      //const res = await axios.get(\"http://127.0.0.1:4000/getKeys\")\r\n      const res = await axios.get(\"https://jn22l.herokuapp.com/getKeys\"); \r\n      console.log('MyCom : res_data', res)\r\n      this.setState({ isLoading: false, items: res.data })    \r\n    } catch (error) {\r\n      console.error(error);\r\n    }    \r\n  }\r\n\r\n  handleKeyClick = (e, redis_key) => {\r\n    e.preventDefault();\r\n    //alert(redis_key);\r\n    this.props.onKeyClick(redis_key);\r\n    //const { information } = this.state;\r\n    /*\r\n    this.setState({\r\n      information: information.concat({ id: this.id++, ...data })\r\n    })\r\n    */\r\n  }\r\n\r\n  render() {\r\n    console.log(\"MyComp.render()\")\r\n    const { isLoading, items } = this.state\r\n    return (\r\n      <div>\r\n        ▶ 쇼핑 이력 \r\n        {isLoading ? '조회중 입니다. 잠시만 기다려 주세요 ...' \r\n                   : items.map((val,idx) => (\r\n                        <li key={idx}>\r\n                          <a href=\"/\" onClick={(e)=>this.handleKeyClick(e,val)} data-DBKey={val}>{val}</a>\r\n                        </li>\r\n                      ))\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MyComp;","// file: src/App.js\r\nimport React, { Component } from 'react';\r\nimport PhoneForm from './components/PhoneForm';\r\nimport PhoneInfoList from './components/PhoneInfoList';\r\nimport MyComp from './components/MyComp';\r\nimport MyComp2 from './components/MyComp2';\r\nimport axios from 'axios';\r\nimport { findAllByDisplayValue } from '@testing-library/react';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n      this.id = 3\r\n      this.state = {\r\n        id: 3,\r\n        loading: false,\r\n        information: [\r\n          {\r\n            id: 0,\r\n            name: '소고기',\r\n            phone: '010-0000-0000'\r\n          },\r\n          {\r\n            id: 1,\r\n            name: '삼겹살',\r\n            phone: '010-0000-0001'\r\n          },\r\n          { \r\n            id: 2,\r\n            name: '북어국',\r\n            phone: '010-0000-0000'\r\n          }\r\n        ],\r\n        keyword: ''\r\n      }\r\n  }\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    console.log('App.js shouldComponentUpdate');\r\n    // 수정 상태가 아니고, info 값이 같다면 리렌더링 안함\r\n    /* complete 추가하면서 주석처리 ( 그냥 모두 렌더링 - 스터디 차원)\r\n    if (!this.state.editing  \r\n        && !nextState.editing\r\n        && nextProps.info === this.props.info) {\r\n      return false;\r\n    }\r\n    */\r\n    // 나머지 경우엔 리렌더링함\r\n    return true;\r\n  }\r\n\r\n  /*\r\n  componentDidMount() {\r\n    axios.post(`http://localhost:4000/getValue?`, \"my_sp_list_20201015\")\r\n         .then(res => {\r\n           //const hello_heroku = res.data;\r\n           console.log('App.js componentDidMount===>',res.data);\r\n           //this.setState({ hello_heroku });\r\n      })\r\n\r\n  }\r\n  */\r\n\r\n  handleSaveDB = ( ) => {\r\n    const { information } = this.state;\r\n    //axios.post('http://localhost:4000/save', {\"information\" : information })\r\n    axios.post('https://jn22l.herokuapp.com/save', {\"information\" : information })\r\n         .then(response => {\r\n           console.log(response.data)\r\n           //this.setState({ information: response.data })\r\n          });    \r\n  }  \r\n\r\n  handleKeyClick = (redis_key) => {\r\n    //axios.post('http://localhost:4000/getValue', redis_key)\r\n    //axios.post(`http://localhost:4000/getValue?key=${redis_key}`)\r\n    axios.post('https://jn22l.herokuapp.com/getValue', redis_key)    \r\n      .then((res) => { \r\n        if(res.status == 200){  \r\n            console.log(res.data)\r\n            this.setState({ isLoading: false, information: res.data.information })\r\n        }    \r\n      })\r\n      .catch((error) => {\r\n        console.error(error)\r\n      })  \r\n    console.log(\"handleKeyClick 끝\")\r\n  }\r\n\r\n  handleChange = (e) => {\r\n    this.setState({\r\n      keyword: e.target.value,\r\n    });\r\n  }  \r\n  handleCreate = (data) => {\r\n    const { information } = this.state;\r\n    this.setState({\r\n      information: information.concat({ id: this.id++, ...data })\r\n    })\r\n  }\r\n  handleRemove = (id) => {\r\n    const { information } = this.state;\r\n    this.setState({\r\n      information: information.filter(info => info.id !== id)\r\n    })\r\n  }  \r\n  handleUpdate = (id, data) => {\r\n    const { information } = this.state;\r\n    this.setState({\r\n      information: information.map(\r\n        info => id === info.id\r\n          ? { ...info, ...data } // 새 객체를 만들어서 기존의 값과 전달받은 data 을 덮어씀\r\n          : info // 기존의 값을 그대로 유지\r\n      )\r\n    })\r\n  }  \r\n  render() {\r\n    console.log('render App');\r\n    const { information, keyword } = this.state;\r\n    const filteredList = information.filter(\r\n      info => info.name.indexOf(keyword) !== -1\r\n      \r\n    );    \r\n    return (\r\n      <div>\r\n        <PhoneForm\r\n          onCreate={this.handleCreate}\r\n          onSaveDB={this.handleSaveDB}\r\n        />\r\n        <input \r\n            placeholder=\"검색 할 품목을 입력하세요..\" \r\n            onChange={this.handleChange}\r\n            value={keyword}\r\n        />\r\n        <hr />        \r\n        <PhoneInfoList \r\n          data={filteredList}\r\n          onRemove={this.handleRemove}\r\n          onUpdate={this.handleUpdate}\r\n        />\r\n        <MyComp\r\n          onKeyClick={this.handleKeyClick}\r\n        />\r\n       \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\n\r\nclass MyComp2 extends Component {\r\n  state = {\r\n    isLoading: true,\r\n    items:[]\r\n  }\r\n\r\n  componentDidMount() {\r\n    //this.saveList(); // post test\r\n  }\r\n\r\n  // \r\n  // saveList = () => {\r\n  //   // Simple POST request with a JSON body using axios\r\n  //   const article = { title: 'This is title', addr: 'this is addr '};\r\n  //   axios.post('https://jn22l.herokuapp.com/save', article)\r\n  //        .then(response => {\r\n  //          console.log(response.data)\r\n  //          this.setState({ isLoading: false })\r\n  //         });\r\n  // }\r\n\r\n  render() {\r\n    const { isLoading, items } = this.state\r\n    return (\r\n      <div>\r\n        {isLoading ? '조회중 입니다. 잠시만 기다려 주세요 ...' : items}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MyComp2;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}