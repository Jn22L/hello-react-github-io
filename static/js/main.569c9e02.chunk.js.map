{"version":3,"sources":["components/PhoneForm.js","components/PhoneInfo.js","components/PhoneInfoList.js","components/MyDBList.js","App.js","serviceWorker.js","index.js"],"names":["PhoneForm","state","name","phone","handleChange","e","setState","target","value","handleSubmit","preventDefault","props","onCreate","handleSaveDB","window","confirm","onSaveDB","this","onSubmit","placeholder","onChange","type","onClick","Component","PhoneInfo","editing","handleRemove","info","onRemove","id","handleToggleEdit","nextProps","nextState","console","log","prevProps","prevState","onUpdate","style","border","padding","margin","defaultProps","PhoneInfoList","data","list","map","key","warn","MyDBList","handleKeyClick","redis_key","onKeyClick","handleDelete","onDeleteClick","handleDoubleClick","canDeleteCount","isMaster","getLocalTime","heroku_time_str","yyyy","substring","mm","dd","hh24","mi","ss","ht","Date","setHours","getHours","getFullYear","getMonth","slice","getDate","getDay","getMinutes","getSeconds","items","isLoading","onDoubleClick","val","idx","href","data-dbkey","App","information","keyword","my_key_list","getHistory","a","axios","get","then","res","status","catch","error","post","length","response","handleCreate","concat","filter","handleUpdate","filteredList","indexOf","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.569c9e02.chunk.js","sourcesContent":["// file: src/components/PhoneForm.js\r\nimport React, { Component } from 'react';\r\n\r\nclass PhoneForm extends Component {\r\n  state = {\r\n    name: '',\r\n    phone: ''\r\n  }\r\n  handleChange = (e) => {\r\n    this.setState({\r\n      [e.target.name]: e.target.value\r\n    })\r\n  }\r\n  handleSubmit = (e) => {\r\n    // 페이지 리로딩 방지\r\n    e.preventDefault();\r\n    // 상태값을 onCreate 를 통하여 부모에게 전달\r\n    this.props.onCreate(this.state);\r\n    // 상태 초기화\r\n    this.setState({\r\n      name: '',\r\n      phone: ''\r\n    })\r\n  }  \r\n  handleSaveDB = (e) => {\r\n    e.preventDefault()\r\n    if(window.confirm('저장할까요?')){\r\n        this.props.onSaveDB(this.state)      \r\n    }\r\n  }      \r\n  render() {\r\n    const { name } = this.state\r\n    return (\r\n        <form onSubmit={this.handleSubmit}>\r\n          <input\r\n            placeholder=\"이름\"\r\n            value={this.state.name}\r\n            onChange={this.handleChange}\r\n            name=\"name\"          \r\n          />\r\n          <input\r\n            placeholder=\"전화번호\"\r\n            value={this.state.phone}\r\n            onChange={this.handleChange}\r\n            name=\"phone\"\r\n          />        \r\n          <button type=\"submit\">등록</button>\r\n          {name !== 'iloveu'?<div></div>:\r\n          <button onClick={this.handleSaveDB}>DB저장</button>\r\n          }\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PhoneForm;","import React, { Component } from 'react';\r\n\r\nclass PhoneInfo extends Component {\r\n  static defaultProps = {\r\n    info: {\r\n      name: '이름',\r\n      phone: '010-0000-0000',\r\n      id: 0\r\n    },\r\n  }\r\n\r\n  state = {\r\n    // 우리는 수정 버튼을 눌렀을 떄 editing 값을 true 로 설정해줄것입니다.\r\n    // 이 값이 true 일 때에는, 기존에 텍스트 형태로 보여주던 값들을\r\n    // input 형태로 보여주게 됩니다.\r\n    editing: false,\r\n    // input 의 값은 유동적이겠지요? input 값을 담기 위해서 각 필드를 위한 값도\r\n    // 설정합니다\r\n    name: '',\r\n    phone: '',\r\n  }\r\n\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    console.log('shouldComponentUpdate PhoneInfo');\r\n    // 수정 상태가 아니고, info 값이 같다면 리렌더링 안함\r\n    if (!this.state.editing  \r\n        && !nextState.editing\r\n        && nextProps.info === this.props.info) {\r\n      return false;\r\n    }\r\n    // 나머지 경우엔 리렌더링함\r\n    return true;\r\n  }\r\n\r\n  handleRemove = () => {\r\n    // 삭제 버튼이 클릭되면 onRemove 에 id 넣어서 호출\r\n    const { info, onRemove } = this.props;\r\n    onRemove(info.id);\r\n  }\r\n\r\n  // editing 값을 반전시키는 함수입니다\r\n  // true -> false, false -> true\r\n  handleToggleEdit = () => {\r\n    const { editing } = this.state;\r\n    this.setState({ editing: !editing });\r\n  }\r\n\r\n  // input 에서 onChange 이벤트가 발생 될 때\r\n  // 호출되는 함수입니다\r\n  handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    this.setState({\r\n      [name]: value\r\n    });\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    console.log('componentDidUpdate PhoneInfo');\r\n    // 여기서는, editing 값이 바뀔 때 처리 할 로직이 적혀있습니다.\r\n    // 수정을 눌렀을땐, 기존의 값이 input에 나타나고,\r\n    // 수정을 적용할땐, input 의 값들을 부모한테 전달해줍니다.\r\n\r\n    const { info, onUpdate } = this.props;\r\n    if(!prevState.editing && this.state.editing) {\r\n      // editing 값이 false -> true 로 전환 될 때\r\n      // info 의 값을 state 에 넣어준다\r\n      this.setState({\r\n        name: info.name,\r\n        phone: info.phone\r\n      })\r\n    }\r\n\r\n    if (prevState.editing && !this.state.editing) {\r\n      // editing 값이 true -> false 로 전환 될 때\r\n      onUpdate(info.id, {\r\n        name: this.state.name,\r\n        phone: this.state.phone\r\n      });\r\n    }\r\n  }\r\n  \r\n  render() {\r\n    console.log('render PhoneInfo ' + this.props.info.id);\r\n    const style = {\r\n      border: '1px solid black',\r\n      padding: '8px',\r\n      margin: '8px'\r\n    };\r\n\r\n    const { editing } = this.state;\r\n    \r\n    if (editing) { // 수정모드\r\n      return (\r\n        <div style={style}>\r\n          <div>\r\n            <input\r\n              value={this.state.name}\r\n              name=\"name\"\r\n              placeholder=\"이름\"\r\n              onChange={this.handleChange}\r\n            />\r\n          </div>\r\n          <div>\r\n            <input\r\n              value={this.state.phone}\r\n              name=\"phone\"\r\n              placeholder=\"전화번호\"\r\n              onChange={this.handleChange}\r\n            />\r\n          </div>\r\n          <button onClick={this.handleToggleEdit}>적용</button>\r\n          <button onClick={this.handleRemove}>삭제</button>\r\n        </div>\r\n      );\r\n    }\r\n\r\n\r\n    // 일반모드\r\n    const {\r\n      name, phone\r\n    } = this.props.info;\r\n    \r\n    return (\r\n      <div style={style}>\r\n        <div><b>{name}</b></div>\r\n        <div>{phone}</div>\r\n        <button onClick={this.handleToggleEdit}>수정</button>\r\n        <button onClick={this.handleRemove}>삭제</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PhoneInfo;","// src/components/PhoneInfoList.js\r\nimport React, { Component } from 'react';\r\nimport PhoneInfo from './PhoneInfo';\r\n\r\nclass PhoneInfoList extends Component {\r\n  static defaultProps = {\r\n      list: [],\r\n      onRemove: () => console.warn('onRemove not defined'),\r\n      onUpdate: () => console.warn('onUpdate not defined'),\r\n  }\r\n\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    console.log('shouldComponentUpdate PhoneInfoList');\r\n    return nextProps.data !== this.props.data;\r\n  }      \r\n\r\n  render() {\r\n    console.log('render PhoneInfoList');\r\n    const { data, onRemove, onUpdate } = this.props;    \r\n    const list = data.map(\r\n        info => (\r\n          <PhoneInfo\r\n            key={info.id}\r\n            info={info}\r\n            onRemove={onRemove}\r\n            onUpdate={onUpdate}\r\n          />)\r\n      );    \r\n\r\n    return (\r\n      <div>\r\n        {list}    \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PhoneInfoList;","import React, { Component } from 'react';\r\n\r\nclass MyDBList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.canDeleteCount = 0\r\n    this.state = {\r\n      isMaster: false,\r\n      items:[]\r\n    }\r\n  }\r\n\r\n  handleKeyClick = (e, redis_key) => {\r\n    e.preventDefault()\r\n    this.props.onKeyClick(redis_key);\r\n  }\r\n\r\n  handleDelete = (e, redis_key) => {\r\n    e.preventDefault()\r\n    if(window.confirm('정말 삭제할까요?')){\r\n      this.props.onDeleteClick(redis_key)\r\n    };\r\n  }\r\n\r\n  handleDoubleClick = (e) => {\r\n    this.canDeleteCount = this.canDeleteCount + 1\r\n    if(this.canDeleteCount >=3 ) {\r\n      this.setState({\r\n        isMaster: true\r\n      })\r\n    }\r\n  }\r\n\r\n  getLocalTime = (heroku_time_str) => {\r\n    let week = [\"일\", \"월\", \"화\", \"수\", \"목\", \"금\", \"토\"];\r\n\r\n    let yyyy = heroku_time_str.substring(11,15)  \r\n    let mm = heroku_time_str.substring(15,17) - 1\r\n    let dd = heroku_time_str.substring(17,19) \r\n    let hh24 = heroku_time_str.substring(20,22)\r\n    let mi = heroku_time_str.substring(23,25) \r\n    let ss = heroku_time_str.substring(26,28)\r\n    let ht = new Date(yyyy, mm, dd, hh24, mi, ss) \r\n    ht.setHours(ht.getHours() + 9);\r\n    \r\n    return ht.getFullYear() + '/' + ('0' + (ht.getMonth()+1)).slice(-2) + '/' + ('0' + ht.getDate()).slice(-2) + '(' + week[ht.getDay()] + ')'\r\n           + ('0' + ht.getHours()).slice(-2) + ':'  + ('0' + ht.getMinutes()).slice(-2) + ':' + ('0' + ht.getSeconds()).slice(-2)\r\n  }\r\n\r\n\r\n  render() {\r\n    const { items, isMaster } = this.state\r\n    const { isLoading, data } = this.props\r\n    return (\r\n      <div>\r\n        <div onDoubleClick={(e)=>this.handleDoubleClick(e)} >▶ 쇼핑 이력 </div>\r\n        {isLoading?'쇼핑이력 조회중 입니다 ...':\r\n          data.map((val,idx) => (\r\n            <li key={idx}>\r\n              <a href=\"/\" \r\n                 onClick={(e)=>this.handleKeyClick(e,val)} \r\n                 data-dbkey={val}>\r\n                  {this.getLocalTime(val)+' '+val.substring(28)}\r\n              </a>\r\n              {isMaster?<button onClick={(e)=>this.handleDelete(e,val)}>삭제</button>:<div></div>}\r\n            </li>\r\n          ))\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MyDBList;","// file: src/App.js\r\nimport React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport PhoneForm from './components/PhoneForm';\r\nimport PhoneInfoList from './components/PhoneInfoList';\r\nimport MyDBList from './components/MyDBList';\r\n\r\nclass App extends Component {\r\n  id = 2\r\n  state = {\r\n    information: [\r\n      {\r\n        id: 0,\r\n        name: '품목1',\r\n        phone: '010-0000-0000'\r\n      },\r\n      {\r\n        id: 1,\r\n        name: '품목2',\r\n        phone: '010-0000-0001'\r\n      }\r\n    ],\r\n    keyword: '',\r\n    my_key_list: [],\r\n    isLoading: true\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getHistory(); \r\n  }\r\n  \r\n  getHistory = async () => {\r\n    //axios.get(\"http://localhost:4000/getKeys\")    \r\n    axios.get(\"https://jn22l.herokuapp.com/getKeys\")    \r\n    .then((res) => { \r\n      if(res.status === 200){  \r\n        console.log('getHeroku : res_data', res)\r\n        this.setState({ isLoading: false, my_key_list: res.data })  \r\n      }    \r\n      console.log('getHeroku~: res_data', res)\r\n    })\r\n    .catch((error) => {\r\n      console.error('getHeroku error',error)\r\n    })\r\n  }\r\n\r\n  handleKeyClick = (redis_key) => {\r\n    //axios.post('http://localhost:4000/getValue', redis_key)\r\n    axios.post('https://jn22l.herokuapp.com/getValue', redis_key)    \r\n      .then((res) => { \r\n        if(res.status === 200){  \r\n            console.log('handleKeyClick',res.data.information)\r\n            this.setState({ isLoading: false, information: res.data.information })\r\n            if(res.data.information.length !== 0) {\r\n              this.id = res.data.information[res.data.information.length-1].id+1 //max id 세팅\r\n            } else {\r\n              this.id = 0\r\n            }\r\n        }    \r\n      })\r\n      .catch((error) => {\r\n        console.error(error)\r\n      })  \r\n    console.log(\"handleKeyClick 끝\")\r\n  }\r\n\r\n  handleSaveDB = ( ) => {\r\n    const { information } = this.state;\r\n    //axios.post('http://localhost:4000/save', {\"information\" : information })\r\n    axios.post('https://jn22l.herokuapp.com/save', {\"information\" : information })\r\n         .then(response => {\r\n            console.log(response.data)\r\n            this.getHistory(); // 목록 조회\r\n          });    \r\n  }  \r\n\r\n  handleDelete = (redis_key) => {\r\n    //axios.post('http://localhost:4000/delKey', redis_key)\r\n    axios.post('https://jn22l.herokuapp.com/delKey', redis_key)    \r\n      .then((res) => { \r\n        if(res.status === 200){  \r\n            console.log('handleDeleteDB',res)\r\n            this.getHistory(); // 목록 조회\r\n        }    \r\n      })\r\n      .catch((error) => {\r\n        console.error(error)\r\n      })  \r\n    console.log(\"handleKeyClick 끝\")\r\n  }\r\n\r\n  handleChange = (e) => {\r\n    this.setState({\r\n      keyword: e.target.value,\r\n    });\r\n  }  \r\n  handleChange = (e) => {\r\n    this.setState({\r\n      keyword: e.target.value,\r\n    });\r\n  }  \r\n  handleCreate = (data) => {\r\n    const { information } = this.state;\r\n    this.setState({\r\n      information: information.concat({ id: this.id++, ...data })\r\n    })\r\n  }\r\n  handleRemove = (id) => {\r\n    const { information } = this.state;\r\n    this.setState({\r\n      information: information.filter(info => info.id !== id)\r\n    })\r\n  }  \r\n  handleUpdate = (id, data) => {\r\n    const { information } = this.state;\r\n    this.setState({\r\n      information: information.map(\r\n        info => id === info.id\r\n          ? { ...info, ...data } // 새 객체를 만들어서 기존의 값과 전달받은 data 을 덮어씀\r\n          : info // 기존의 값을 그대로 유지\r\n      )\r\n    })\r\n  }  \r\n  render() {\r\n    console.log('render App');\r\n    const { information, keyword, my_key_list, isLoading } = this.state;\r\n    const filteredList = information.filter(\r\n      info => info.name.indexOf(keyword) !== -1\r\n      \r\n    );    \r\n    return (\r\n      <div>\r\n        <PhoneForm\r\n          onCreate={this.handleCreate}\r\n          onSaveDB={this.handleSaveDB}\r\n        />\r\n        <p>\r\n          <input \r\n            placeholder=\"검색 할 이름을 입력하세요..\" \r\n            onChange={this.handleChange}\r\n            value={keyword}\r\n          />\r\n        </p>\r\n        <hr />        \r\n        <PhoneInfoList \r\n          data={filteredList}\r\n          onRemove={this.handleRemove}\r\n          onUpdate={this.handleUpdate}\r\n        />    \r\n        <MyDBList\r\n          data={my_key_list}\r\n          onKeyClick={this.handleKeyClick}\r\n          onDeleteClick={this.handleDelete}\r\n          isLoading={isLoading}\r\n        />      \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}