{"version":3,"sources":["components/PhoneForm.js","components/PhoneInfo.js","components/PhoneInfoList.js","App.js","serviceWorker.js","index.js"],"names":["PhoneForm","state","name","phone","handleChange","e","setState","target","value","handleSubmit","preventDefault","props","onCreate","onSubmit","this","placeholder","onChange","type","Component","PhoneInfo","editing","handleRemove","info","onRemove","id","handleToggleEdit","nextProps","nextState","console","log","prevProps","prevState","onUpdate","style","border","padding","margin","onClick","defaultProps","PhoneInfoList","data","list","map","key","warn","App","information","addr","keyword","handleCreate","concat","filter","handleUpdate","filteredList","indexOf","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.cbe73a61.chunk.js","sourcesContent":["// file: src/components/PhoneForm.js\r\nimport React, { Component } from 'react';\r\n\r\nclass PhoneForm extends Component {\r\n  state = {\r\n    name: '',\r\n    phone: ''\r\n  }\r\n  handleChange = (e) => {\r\n    this.setState({\r\n      [e.target.name]: e.target.value\r\n    })\r\n  }\r\n  handleSubmit = (e) => {\r\n    // 페이지 리로딩 방지\r\n    e.preventDefault();\r\n    // 상태값을 onCreate 를 통하여 부모에게 전달\r\n    this.props.onCreate(this.state);\r\n    // 상태 초기화\r\n    this.setState({\r\n      name: '',\r\n      phone: ''\r\n    })\r\n  }  \r\n  render() {\r\n    return (\r\n        <form onSubmit={this.handleSubmit}>\r\n          <input\r\n            placeholder=\"이름\"\r\n            value={this.state.name}\r\n            onChange={this.handleChange}\r\n            name=\"name\"          \r\n          />\r\n          <input\r\n            placeholder=\"전화번호\"\r\n            value={this.state.phone}\r\n            onChange={this.handleChange}\r\n            name=\"phone\"\r\n          />        \r\n          <button type=\"submit\">등록</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PhoneForm;","import React, { Component } from 'react';\r\n\r\nclass PhoneInfo extends Component {\r\n  static defaultProps = {\r\n    info: {\r\n      name: '이름',\r\n      phone: '010-0000-0000',\r\n      id: 0\r\n    },\r\n  }\r\n\r\n  state = {\r\n    // 우리는 수정 버튼을 눌렀을 떄 editing 값을 true 로 설정해줄것입니다.\r\n    // 이 값이 true 일 때에는, 기존에 텍스트 형태로 보여주던 값들을\r\n    // input 형태로 보여주게 됩니다.\r\n    editing: false,\r\n    // input 의 값은 유동적이겠지요? input 값을 담기 위해서 각 필드를 위한 값도\r\n    // 설정합니다\r\n    name: '',\r\n    phone: '',\r\n  }\r\n\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    console.log('shouldComponentUpdate PhoneInfo');\r\n    // 수정 상태가 아니고, info 값이 같다면 리렌더링 안함\r\n    if (!this.state.editing  \r\n        && !nextState.editing\r\n        && nextProps.info === this.props.info) {\r\n      return false;\r\n    }\r\n    // 나머지 경우엔 리렌더링함\r\n    return true;\r\n  }\r\n\r\n  handleRemove = () => {\r\n    // 삭제 버튼이 클릭되면 onRemove 에 id 넣어서 호출\r\n    const { info, onRemove } = this.props;\r\n    onRemove(info.id);\r\n  }\r\n\r\n  // editing 값을 반전시키는 함수입니다\r\n  // true -> false, false -> true\r\n  handleToggleEdit = () => {\r\n    const { editing } = this.state;\r\n    this.setState({ editing: !editing });\r\n  }\r\n\r\n  // input 에서 onChange 이벤트가 발생 될 때\r\n  // 호출되는 함수입니다\r\n  handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    this.setState({\r\n      [name]: value\r\n    });\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    console.log('componentDidUpdate PhoneInfo');\r\n    // 여기서는, editing 값이 바뀔 때 처리 할 로직이 적혀있습니다.\r\n    // 수정을 눌렀을땐, 기존의 값이 input에 나타나고,\r\n    // 수정을 적용할땐, input 의 값들을 부모한테 전달해줍니다.\r\n\r\n    const { info, onUpdate } = this.props;\r\n    if(!prevState.editing && this.state.editing) {\r\n      // editing 값이 false -> true 로 전환 될 때\r\n      // info 의 값을 state 에 넣어준다\r\n      this.setState({\r\n        name: info.name,\r\n        phone: info.phone\r\n      })\r\n    }\r\n\r\n    if (prevState.editing && !this.state.editing) {\r\n      // editing 값이 true -> false 로 전환 될 때\r\n      onUpdate(info.id, {\r\n        name: this.state.name,\r\n        phone: this.state.phone\r\n      });\r\n    }\r\n  }\r\n  \r\n  render() {\r\n    console.log('render PhoneInfo ' + this.props.info.id);\r\n    const style = {\r\n      border: '1px solid black',\r\n      padding: '8px',\r\n      margin: '8px'\r\n    };\r\n\r\n    const { editing } = this.state;\r\n    \r\n    if (editing) { // 수정모드\r\n      return (\r\n        <div style={style}>\r\n          <div>\r\n            <input\r\n              value={this.state.name}\r\n              name=\"name\"\r\n              placeholder=\"이름\"\r\n              onChange={this.handleChange}\r\n            />\r\n          </div>\r\n          <div>\r\n            <input\r\n              value={this.state.phone}\r\n              name=\"phone\"\r\n              placeholder=\"전화번호\"\r\n              onChange={this.handleChange}\r\n            />\r\n          </div>\r\n          <button onClick={this.handleToggleEdit}>적용</button>\r\n          <button onClick={this.handleRemove}>삭제</button>\r\n        </div>\r\n      );\r\n    }\r\n\r\n\r\n    // 일반모드\r\n    const {\r\n      name, phone\r\n    } = this.props.info;\r\n    \r\n    return (\r\n      <div style={style}>\r\n        <div><b>{name}</b></div>\r\n        <div>{phone}</div>\r\n        <button onClick={this.handleToggleEdit}>수정</button>\r\n        <button onClick={this.handleRemove}>삭제</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PhoneInfo;","// src/components/PhoneInfoList.js\r\nimport React, { Component } from 'react';\r\nimport PhoneInfo from './PhoneInfo';\r\n\r\nclass PhoneInfoList extends Component {\r\n  static defaultProps = {\r\n      list: [],\r\n      onRemove: () => console.warn('onRemove not defined'),\r\n      onUpdate: () => console.warn('onUpdate not defined'),\r\n  }\r\n\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    console.log('shouldComponentUpdate PhoneInfoList');\r\n    return nextProps.data !== this.props.data;\r\n  }      \r\n\r\n  render() {\r\n    console.log('render PhoneInfoList');\r\n    const { data, onRemove, onUpdate } = this.props;    \r\n    const list = data.map(\r\n        info => (\r\n          <PhoneInfo\r\n            key={info.id}\r\n            info={info}\r\n            onRemove={onRemove}\r\n            onUpdate={onUpdate}\r\n          />)\r\n      );    \r\n\r\n    return (\r\n      <div>\r\n        {list}    \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PhoneInfoList;","// file: src/App.js\r\nimport React, { Component } from 'react';\r\nimport PhoneForm from './components/PhoneForm';\r\nimport PhoneInfoList from './components/PhoneInfoList';\r\n\r\nclass App extends Component {\r\n  id = 2\r\n  state = {\r\n    information: [\r\n      {\r\n        id: 0,\r\n        name: '소고기',\r\n        phone: '010-0000-0000',\r\n        addr: '갈마동'\r\n      },\r\n      {\r\n        id: 1,\r\n        name: '홍길동',\r\n        phone: '010-0000-0001',\r\n        addr: '갈마동'\r\n      }\r\n    ],\r\n    keyword: ''\r\n  }\r\n  handleChange = (e) => {\r\n    this.setState({\r\n      keyword: e.target.value,\r\n    });\r\n  }  \r\n  handleCreate = (data) => {\r\n    const { information } = this.state;\r\n    this.setState({\r\n      information: information.concat({ id: this.id++, ...data })\r\n    })\r\n  }\r\n  handleRemove = (id) => {\r\n    const { information } = this.state;\r\n    this.setState({\r\n      information: information.filter(info => info.id !== id)\r\n    })\r\n  }  \r\n  handleUpdate = (id, data) => {\r\n    const { information } = this.state;\r\n    this.setState({\r\n      information: information.map(\r\n        info => id === info.id\r\n          ? { ...info, ...data } // 새 객체를 만들어서 기존의 값과 전달받은 data 을 덮어씀\r\n          : info // 기존의 값을 그대로 유지\r\n      )\r\n    })\r\n  }  \r\n  render() {\r\n    console.log('render App');\r\n    const { information, keyword } = this.state;\r\n    const filteredList = information.filter(\r\n      info => info.name.indexOf(keyword) !== -1\r\n      \r\n    );    \r\n    return (\r\n      <div>\r\n        <PhoneForm\r\n          onCreate={this.handleCreate}\r\n        />\r\n        <p>\r\n          <input \r\n            placeholder=\"검색 할 이름을 입력하세요..\" \r\n            onChange={this.handleChange}\r\n            value={keyword}\r\n          />\r\n        </p>\r\n        <hr />        \r\n        <PhoneInfoList \r\n          data={filteredList}\r\n          onRemove={this.handleRemove}\r\n          onUpdate={this.handleUpdate}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}